# Test `type ...' in bash
# Indicate "unsupported" if `type' exits with error status.
# @param string $command  Command to locate
proc assert_bash_type {command} {
    set test "$command should be available in bash"
    set cmd "type $command &> /dev/null && echo -n 0 || echo -n 1"  
    send "$cmd\r"
    expect "$cmd\r\n"
    expect {
	-ex 0 { set result true }
	-ex 1 { set result false; unsupported "$test" }
    }; # expect
    expect "/@"
    return $result
}; # assert_bash_type()


# Make sure the expected items are also returned by TAB-completing the
# specified command.
# Break items into chunks because `expect' seems to have a limited buffer size
# @param list $expected
# @param string $cmd  Command given to generate items
# @param string $test  (optional) Test titel.  Default is "$cmd<TAB> should show completions"
# @param integer $size  (optional) Chunk size.  Default is 20.
# @result boolean  True if successful, False if not
proc assert_complete {expected cmd {test ""} {prompt /@} {size 20}} {
    if {$test == ""} {set test "$cmd should show completions"}
    send "$cmd\t"
    expect -ex "$cmd\r\n"
    if {[match_items $expected $test]} {
	expect {
	    -re "$prompt$cmd$" { pass "$test" }
	    -re $prompt { unresolved "$test at prompt" }
	    -re eof { unresolved "eof" }
	}
    } else {
	fail "$test"
    }; # if
}; # assert_complete()


# Make sure the specified command can be executed from within Tcl/Expect.
# Fail the test with status UNSUPPORTED if Tcl fails with error "POSIX/ENOENT
# (No such file or directory)", or UNRESOLVED if other error occurs.  
# NOTE: Further tests are assumed if executing the command is successful.  The
#       test isn't immediately declared to have PASSED if the command is
#       executed successful.
# @param string $command
# @param string $stdout  (optional) Reference to variable to hold stdout.
# @param string $test (optional)  Test titel
proc assert_exec {cmd {stdout ''} {test ''}} {
    if {$test == ""} {set test "$cmd should execute successful"}
    upvar $stdout results
    set status [catch {eval exec $cmd} results]
    if {$status == 0} {
	set result true
    } else {
	set result false
	    # Command not found (POSIX/ENOENT = no such file or directory)?
	if {[lindex $::errorCode 0] == "POSIX" && [lindex $::errorCode 1] == "ENOENT"} {
	    # Yes, command not found;
		# Indicate test is unsupported
	    unsupported "$test"
	} else {
	    unresolved "$test"
	}; # if
    }; # if
    return $result
}; # assert_exec()


# Expect items.
# Break items into chunks because `expect' seems to have a limited buffer size
# @param list $items
# @param integer $size  Chunk size
# @result boolean  True if successful, False if not
proc match_items {items test {size 20}} {
    set result false
    for {set i 0} {$i < [llength $items]} {set i [expr {$i + $size}]} {
	set expected ""
	for {set j 0} {$j < $size && $i + $j < [llength $items]} {incr j} {
	    set item "[lindex $items [expr {$i + $j}]]"
		# Escape special regexp characters
	    regsub -all {([\[\]\(\)\.\\\+])} $item {\\\1} item
	    set expected "${expected}$item\\s+"
	}; # for
	expect {
	    -re "$expected" { set result true }
	    default { set result false; break }
	    timeout { set result false; break }
	}; # expect
    }; # for
    return $result
}; # match_items()


# Interrupt completion and sync with prompt.
# Send signals QUIT & INT.
proc sync_after_int {} {
	set test "Sync after INT"
	sleep .1
	send \031\003;  # QUIT/INT
	expect /@
}; # sync_after_int()


proc sync_after_tab {} {
        # NOTE: Wait in case completion returns nothing - because `units' isn't
        #       installed, so that "^$cdm.*$" doesn't match too early - before
        #       comp_install has finished
    sleep .4
}; # sync_after_tab()
